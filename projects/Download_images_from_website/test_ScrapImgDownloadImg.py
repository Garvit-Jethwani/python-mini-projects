# ********RoostGPT********
"""
Test generated by RoostGPT for test verify-check using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=download_img_c3dc3564a6
ROOST_METHOD_SIG_HASH=download_img_4cf4d88f36

```python
Scenario 1: Validate successful image download
Details:
  TestName: test_successful_image_download
  Description: This test is intended to verify that the function correctly downloads an image from a valid URL and saves it to the correct location with the correct filename.
Execution:
  Arrange: Prepare a valid image URL and a valid index. Ensure the output directory exists.
  Act: Call the download_img function with the prepared parameters.
  Assert: Check that an image file was created in the output directory with the correct filename and that its content matches the content of the image at the URL.
Validation:
  This test validates the core functionality of the function. It ensures that the function correctly handles normal, expected inputs.

Scenario 2: Validate handling of non-image URLs
Details:
  TestName: test_non_image_url
  Description: This test is intended to verify that the function correctly handles a URL that does not point to an image file.
Execution:
  Arrange: Prepare a URL that does not point to an image and a valid index.
  Act: Call the download_img function with the prepared parameters.
  Assert: Check that no file was created in the output directory.
Validation:
  This test ensures that the function correctly handles unexpected inputs and does not create invalid files when given a non-image URL.

Scenario 3: Validate handling of invalid URLs
Details:
  TestName: test_invalid_url
  Description: This test is intended to verify that the function correctly handles an invalid URL.
Execution:
  Arrange: Prepare an invalid URL and a valid index.
  Act: Call the download_img function with the prepared parameters.
  Assert: Check that no file was created in the output directory.
Validation:
  This test ensures that the function correctly handles invalid inputs and does not create files when given an invalid URL.

Scenario 4: Validate handling of unsupported image types
Details:
  TestName: test_unsupported_image_type
  Description: This test is intended to verify that the function correctly handles a URL that points to an image type not in the supported extensions list.
Execution:
  Arrange: Prepare a URL that points to an unsupported image type and a valid index.
  Act: Call the download_img function with the prepared parameters.
  Assert: Check that no file was created in the output directory.
Validation:
  This test ensures that the function correctly handles unexpected inputs and does not create invalid files when given a URL pointing to an unsupported image type.

Scenario 5: Validate handling of negative index
Details:
  TestName: test_negative_index
  Description: This test is intended to verify that the function correctly handles a negative index.
Execution:
  Arrange: Prepare a valid image URL and a negative index.
  Act: Call the download_img function with the prepared parameters.
  Assert: Check that no file was created in the output directory.
Validation:
  This test ensures that the function correctly handles invalid inputs and does not create files when given a negative index.
```
"""

# ********RoostGPT********
import importlib.util
import os
import requests
import pytest
import filecmp

module_name = 'scrap-img'
module_path = os.path.join(os.path.dirname(__file__), f'{module_name}.py')
spec = importlib.util.spec_from_file_location(module_name, module_path)
module = importlib.util.module_from_spec(spec)
sys.modules[module_name] = module
spec.loader.exec_module(module)

class Test_ScrapImgDownloadImg:
    output_dir = 'output'
    if not os.path.isdir(output_dir):
        os.mkdir(output_dir)

    @pytest.mark.smoke
    def test_successful_image_download(self):
        url = 'https://example.com/image.jpg'
        index = 0
        module.download_img(url, index, self.output_dir)
        assert os.path.isfile(os.path.join(self.output_dir, f'{index+1}.jpg'))
        assert filecmp.cmp(os.path.join(self.output_dir, f'{index+1}.jpg'), requests.get(url).content)

    @pytest.mark.regression
    def test_non_image_url(self):
        url = 'https://example.com'
        index = 0
        module.download_img(url, index, self.output_dir)
        assert not os.path.isfile(os.path.join(self.output_dir, f'{index+1}.jpg'))

    @pytest.mark.regression
    def test_invalid_url(self):
        url = 'not a url'
        index = 0
        module.download_img(url, index, self.output_dir)
        assert not os.path.isfile(os.path.join(self.output_dir, f'{index+1}.jpg'))

    @pytest.mark.regression
    def test_unsupported_image_type(self):
        url = 'https://example.com/image.bmp'
        index = 0
        module.download_img(url, index, self.output_dir)
        assert not os.path.isfile(os.path.join(self.output_dir, f'{index+1}.bmp'))

    @pytest.mark.regression
    def test_negative_index(self):
        url = 'https://example.com/image.jpg'
        index = -1
        module.download_img(url, index, self.output_dir)
        assert not os.path.isfile(os.path.join(self.output_dir, f'{index+1}.jpg'))
